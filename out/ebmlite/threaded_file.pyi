from typing import Any

class ThreadAwareFile(file):
    timeout: Any = ...
    initArgs: Any = ...
    initKwargs: Any = ...
    threads: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def makeThreadAware(cls, fileStream: Any): ...
    def getThreadStream(self): ...
    def closeAll(self) -> None: ...
    def cleanup(self) -> None: ...
    @property
    def closed(self): ...
    def close(self, *args: Any, **kwargs: Any): ...
    def __format__(self, *args: Any, **kwargs: Any): ...
    def __hash__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self, *args: Any, **kwargs: Any): ...
    def __reduce_ex__(self, *args: Any, **kwargs: Any): ...
    def __sizeof__(self, *args: Any, **kwargs: Any): ...
    def fileno(self, *args: Any, **kwargs: Any): ...
    def flush(self, *args: Any, **kwargs: Any): ...
    def isatty(self, *args: Any, **kwargs: Any): ...
    def next(self, *args: Any, **kwargs: Any): ...
    def read(self, *args: Any, **kwargs: Any): ...
    def readinto(self, *args: Any, **kwargs: Any): ...
    def readline(self, *args: Any, **kwargs: Any): ...
    def readlines(self, *args: Any, **kwargs: Any): ...
    def seek(self, *args: Any, **kwargs: Any): ...
    def tell(self, *args: Any, **kwargs: Any): ...
    def truncate(self, *args: Any, **kwargs: Any) -> None: ...
    def write(self, *args: Any, **kwargs: Any) -> None: ...
    def writelines(self, *args: Any, **kwargs: Any) -> None: ...
    def xreadlines(self, *args: Any, **kwargs: Any): ...
    def __enter__(self, *args: Any, **kwargs: Any): ...
    def __exit__(self, *args: Any, **kwargs: Any): ...
    @property
    def encoding(self): ...
    @property
    def errors(self): ...
    @property
    def mode(self): ...
    @property
    def name(self): ...
    @property
    def newlines(self): ...
    @property
    def softspace(self): ...
    @softspace.setter
    def softspace(self, val: Any) -> None: ...
