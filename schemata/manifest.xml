<?xml version="1.0" encoding="utf-8"?>

<!-- The list of element parameters for this file seems to be: -->
<!--
name="MyElement"
(cppname)="ParentMyElement (arbitrary)"
level="0"
id="0x1234"
type="master, uinteger, integer, binary, string, utf=8, float"
mandatory="0"
multiple="0"
minver="1"
range="> 0, not 0, 1-30" ... seems to be arbitrary / probably not checked.
bytesize="16"
default="123" or a text value that may or may not be the name of another tag

(webm)
(divx)
-->

<table>
  <!-- Base EBML elements. Required. -->
  <element name="EBML" level="0" id="0x1A45DFA3" type="master" mandatory="1" multiple="1" minver="1">Set the EBML characteristics of the data to follow. Each EBML document has to start with this.</element>
  <element name="EBMLVersion" level="1" id="0x4286" type="uinteger" mandatory="1" default="1" minver="1">The version of EBML parser used to create the file.</element>
  <element name="EBMLReadVersion" level="1" id="0x42F7" type="uinteger" mandatory="1" default="1" minver="1">The minimum EBML version a parser has to support to read this file.</element>
  <element name="EBMLMaxIDLength" level="1" id="0x42F2" type="uinteger" mandatory="1" default="4" minver="1">The maximum length of the IDs you'll find in this file (4 or less in Matroska).</element>
  <element name="EBMLMaxSizeLength" level="1" id="0x42F3" type="uinteger" mandatory="1" default="8" minver="1">The maximum length of the sizes you'll find in this file (8 or less in Matroska). This does not override the element size indicated at the beginning of an element. Elements that have an indicated size which is larger than what is allowed by EBMLMaxSizeLength shall be considered invalid.</element>
  <element name="DocType" level="1" id="0x4282" type="string" mandatory="1" default="ssxmanifest" minver="1">A string that describes the type of document that follows this EBML header. 'matroska' in our case or 'webm' for webm files.</element>
  <element name="DocTypeVersion" level="1" id="0x4287" type="uinteger" mandatory="1" default="1" minver="1">The version of DocType interpreter used to create the file.</element>
  <element name="DocTypeReadVersion" level="1" id="0x4285" type="uinteger" mandatory="1" default="1" minver="1">The minimum DocType version an interpreter has to support to read this file.</element>
  <element name="Void" level="-1" id="0xEC" type="binary" minver="1">Used to void damaged data, to avoid unexpected behaviors when using damaged data. The content is discarded. Also used to reserve space in a sub-element for later use.</element>
  <element name="CRC-32" level="-1" id="0xBF" type="binary" minver="1" webm="0">The CRC is computed on all the data of the Master element it's in. The CRC element should be the first in it's parent master for easier reading. All level 1 elements should include a CRC-32. The CRC in use is the IEEE CRC32 Little Endian</element>
  <element name="SignatureSlot" level="-1" id="0x1B538667" type="master" multiple="1" webm="0">Contain signature of some (coming) elements in the stream.</element>
  <element name="SignatureAlgo" level="1" id="0x7E8A" type="uinteger" webm="0">Signature algorithm used (1=RSA, 2=elliptic).</element>
  <element name="SignatureHash" level="1" id="0x7E9A" type="uinteger" webm="0">Hash algorithm used (1=SHA1-160, 2=MD5).</element>
  <element name="SignaturePublicKey" level="1" id="0x7EA5" type="binary" webm="0">The public key to use with the algorithm (in the case of a PKI-based signature).</element>
  <element name="Signature" level="1" id="0x7EB5" type="binary" webm="0">The signature of the data (until a new.</element>
  <element name="SignatureElements" level="1" id="0x7E5B" type="master" webm="0">Contains elements that will be used to compute the signature.</element>
  <element name="SignatureElementList" level="2" id="0x7E7B" type="master" multiple="1" webm="0">A list consists of a number of consecutive elements that represent one case where data is used in signature. Ex: <i>Cluster|Block|BlockAdditional</i> means that the BlockAdditional of all Blocks in all Clusters is used for encryption.</element>
  <element name="SignedElement" level="3" id="0x6532" type="binary" multiple="1" webm="0">An element ID whose data will be used to compute the signature.</element>

  <!-- Mide format global tags. Support required for all .mide schemas. -->
  <!-- Since the generating device may be very memory-constrained, and these tags may be repeated periodically for streaming, we use a short (global) element ID and generally allow them at any level -->
  <element name="SchemaID" level="-1" id="0xFE" type="uinteger" minver="1">Device EBML schema (aka 'tagset') hint. Points to a numeric schema ID defined at the receiving side.</element>
  <element name="Sync" level="-1" id="0xFA" type="binary" minver="1">Used to provide an arbitrary length sync word (for network / stream framing purposes) at any point in the stream.</element>
  <!--<element name="Discontinuity" level="-1" id="0xFD" type="binary" minver="1">Probably replaced by a flag in individual datablocks at the Channel level.</element>  -->
  <element name="ElementTag" level="-1" id="0xFC" type="integer" minver="1">Arbitrary tag. Allow for separate opening and closing tags without knowing the length of the enclosed data in advance. I.e. instead of [tag len value=[subtag len... /]/], [tag len=0][subtags and contents][/tag]. Positive value corresponds to the corresponding ElementID as an opening tag; the corresponding negative value as the closing tag. Value -int_max for any int size is reserved.</element>

<!-- Slam Stick X Manifest tags -->

<!-- NOTES: -->
<!-- This is completely independent from the portable instrumentation schema. Under normal circumstances, nobody should have to read this data directly. It is internal housekeeping for the recording device. -->

<!-- Overall USERPAGE structure -->
	<!-- The USERPAGE is 2KBytes (0x0000 ~ 0x07FF) and will store the complete Manifest and calibration entries. -->
	<!-- 0x0000: (uint16-le) offset to start of Manifest -->
	<!-- 0x0002: (uint16-le) length of Manifest -->
	<!-- 0x0004: (uint16-le) offset to start of factory calibration info -->
	<!-- 0x0006: (uint16-le) length of factory cal block -->
	<!-- 0x0008: (uint16-le) offset to start of canned RecordingProperties -->
	<!-- 0x000A: (uint16-le) length of canned RecordingProperties -->
	<!-- (0x000C ~ 0x000F reserved) -->
	<!-- 0x0010: Recommended starting offset of Manifest. If the number of unique sections, indicated by offset/length entries as above, exceeds this value, division between section offset/length entries and first payload will be determined by the offset of the Manifest. -->

	<!-- Manifest structure -->
	<!-- Consists of a DeviceManifest master tag and its subelements as shown below. The SystemInfo and Battery entries are required. -->
	<!-- The remaining entries are optional, but strongly recommended, for the first Slam Stick product (defaults will be used); required if different from the defaults. -->
	<!-- Note, the production device implements a proper EBML parser for this stuff, so the "length" values shown for struct-like access are retained only as a note to the implementer regarding max. payload size for the field.-->

	<!-- Config structure -->
	<!-- Consists of the ConfigurationList master element and children, exactly as it will appear in the output. -->
	<!-- Entry 0 contains a single ValuePolynomial corresponding to the 3-axis accelerometer (channel 0) -->
	<!-- Entries 1-3 contain a ValuePolynomial and optional TempCoPolynomial corresponding to accelerometer subchannels 0..2, respectively. -->


	<element name="DeviceManifest" level="0" id="0x184D414E" type="master" mandatory="0" multiple="0" minver="1">Class D (4 byte + 2 length) Device Manifest master. Presence of this master tells the device a valid manifest is present.</element>
		<element name="SystemInfo" level="1" id="0x4D00" type="master" mandatory="0" multiple="0" minver="1">Class B (2 byte + 2 length) Master element for the basic system info (serial#, etc).</element>
			<element name="SerialNumber" level="2" id="0x4D01" type="uinteger" mandatory="1" multiple="0" minver="1" length="4">4-byte Vendor-defined (MIDE) product serial number.</element>
			<element name="DeviceTypeUID" level="2" id="0x4D02" type="uinteger" mandatory="1" multiple="0" minver="1" length="4">4-byte Unique hardware configuration ID used to distinguish recorder types/variants.</element>
			<element name="ProductName" level="2" id="0x4D03" type="string" mandatory="1" multiple="0" minver="1" length="40">20-byte Displayable text name for this product/variant.</element>
			<element name="HwRev" level="2" id="0x4D04" type="uinteger" mandatory="1" multiple="0" minver="1" length="2">Hardware revision code for this DeviceTypeUID.</element>
			<!-- FwRev and FwRevString, if applicable, are hardcoded in the FW itself and don't need a Manifest schema entry, They do, however, have a MIDE schema entry under RecorderInfo. -->
			<element name="MinFwRev" level="2" id="0x4D05" type="uinteger" mandatory="1" multiple="0" minver="1" length="2">Minimum FW revision code required to support this hardware.</element>
			<element name="DateOfManufacture" level="2" id="0x4D06" type="uinteger" mandatory="1" multiple="0" minver="1" length="8">8-byte date/time of manufacture (initial programming) in UTC seconds since the Epoch.</element>
			<!--<element name="Vdd" level="2" id="0x4D07" type="uinteger" mandatory="1" multiple="0" minver="1" length="3">Vdd value in mV.</element>-->
			<!--<element name="Vref" level="2" id="0x4D08" type="uinteger" mandatory="1" multiple="0" minver="1" length="3">ADC Vref value in mV.</element>-->
			<element name="PartNumber" level="2" id="0x4D09" type="string" mandatory="1" multiple="0" minver="1">Device part number string (e.g. VR002-100-XYZ).</element>
			<element name="HwCustomStr" level="2" id="0x4D0A" type="string" mandatory="0" multiple="0" minver="1">Custom hardware identifier. Hardware is a custom version if present.</element>
			<element name="FwCustomStr" level="2" id="0x4D0B" type="string" mandatory="0" multiple="0" minver="1">Custom firmware build. Firmware is a custom build if present. Name should match FW branch/tag name as applicable for identification purposes, but is mainly present so FW updater can generate a warning if a custom build will be replaced by a standard one.</element>
			<element name="HwAPI" level="2" id="0x4D0C" type="uinteger" mandatory="0" multiple="0" minver="1">Hardware API level of this hardware. This is bumped in response to hardware revs with compatibility implications.</element>
			<element name="BatchIDStr" level="2" id="0x4D0D" type="string" mandatory="0" multiple="0" minver="1">Batch identification string. Text string encoding the date, variant and manufacturer of a given hardware batch. Batch is independent of HwRev as there may be multiple production batches of a given revision, from multiple fab houses.</element>

		<!-- Battery Info -->
		<element name="Battery" level="1" id="0x4D10" type="master" mandatory="0" multiple="0" minver="1">Class B (2 byte + 2 length) Master element for battery info.</element>
			<element name="Capacity_mAh" level="2" id="0x4D11" type="uinteger" mandatory="0" multiple="0" minver="1">4-byte Nominal battery capacity in mAh.</element>
			<element name="Vddscale_full_thresh" level="2" id="0x4D12" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte ACMP Vdd scale value corresponding to battery full threshold (0 ~ 63).</element>
			<element name="Vddscale_ok_thresh" level="2" id="0x4D13" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte ACMP Vdd scale value corresponding to battery 'ok' threshold (0 ~ 63).</element>
			<element name="Vddscale_low_thresh" level="2" id="0x4D14" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte ACMP Vdd scale value corresponding to low-battery alarm threshold (0 ~ 63).</element>
			<element name="Vddscale_dead_thresh" level="2" id="0x4D15" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte ACMP Vdd scale value corresponding to low-battery poweroff threshold (0 ~ 63).</element>
			<element name="Vsd" level="2" id="0x4D16" type="uinteger" mandatory="1" multiple="0" minver="1">Hardware cutoff voltage value in mV.</element>

		<!-- Information about the antialiasing filter bank, if present. -->
		<element name="AAFilterInfo" level="1" id="0x4D20" type="master" mandatory="0" multiple="0" minver="1">Class B (2 byte + 2 length) Master element for the antialiasing filter info.</element>
			<element name="FilterResponse" level="2" id="0x4D21" type="uinteger" mandatory="1" multiple="0" minver="1">1-byte filter type code (0=Butterworth, others currently undefined).</element>
			<element name="FilterOrder" level="2" id="0x4D22" type="uinteger" mandatory="1" multiple="0" minver="1">1-byte filter order value.</element>
			<element name="ClockToCornerRatio" level="2" id="0x4D23" type="uinteger" mandatory="1" multiple="0" minver="1">2-byte Ratio between input clock frequency and resulting filter corner frequency (clock-tunable filters only).</element>
			<element name="FMin" level="2" id="0x4D24" type="uinteger" mandatory="1" multiple="0" minver="1">4-byte Minimum allowed corner frequency in Hz.</element>
			<element name="FMax" level="2" id="0x4D25" type="uinteger" mandatory="1" multiple="0" minver="1">4-byte Maximum allowed corner frequency in Hz.</element>
			<element name="Bypassable" level="2" id="0x4D26" type="uinteger" mandatory="1" multiple="0" minver="1">1-byte Boolean specifying that filter bypass is supported (low-fidelity data acquisition allowed in the disabled state). Nonzero = true.</element>

		<!-- Specifies one arbitrary analog sensor. -->
		<element name="AnalogSensorInfo" level="1" id="0x4D30" type="master" mandatory="0" multiple="1" minver="1">Class B (2 byte + 2 length) Master element for one analog sensor of one or more channels.</element>
			<element name="AnalogSensorEntryID" level="2" id="0x4D31" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte Locally unique ID for referencing this entry. Used as ChannelID.</element>
			<element name="AnalogSensorDeviceCode" level="2" id="0x4D32" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte Code identifying the analog sensor. 0 = ADXL001, 1 = 832M1, others=TBD.</element>
			<element name="AnalogSensorSerialNumber" level="2" id="0x4D33" type="string" mandatory="0" multiple="0" minver="1">16-byte string for the sensor manufacturer's serial #. This is a string because some vendors (including that of 832M1) love to mix in letters, hyphens and other nonnumeric elements.</element>
			<!-- Units? Probably handled bo 'plot'; device does not need to know. -->
			<element name="AnalogSensorUsesAAFilter" level="2" id="0x4D34" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte Boolean specifies that this sensor goes through the AA filter. Nonzero = true.</element>
			<element name="AnalogSensorSettlingTime" level="2" id="0x4D35" type="uinteger" mandatory="0" multiple="0" minver="1">2-byte Sensor start up + settling time in ticks (1/32768s)</element>
			<element name="AnalogSensorName" level="2" id="0x4D36" type="string" mandatory="0" multiple="0" minver="1">16-byte string for the sensor name / part#. This will probably be overridden by 'Plot'.</element>
			<element name="AnalogSensorCalIDRef" level="2" id="0x4D37" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte Reference to a SensorChannel-level CalID. This cal entry will simply determine the fixed sensor scaling and offset.</element>
			<element name="AnalogSensorScaleHintI" level="2" id="0x4D38" type="integer" mandatory="0" multiple="0" minver="1">4-byte int32 hint expressing the nominal sensor scale and whether it is inverted. For sensors (accelerometer) where one of several nominal sensitivities can be stuffed. This value is optionally used by the device to distinguish stuffed sensitivities without having to interpret a calibration element.</element>
			<element name="AnalogSensorScaleHintF" level="2" id="0x4D39" type="float" mandatory="0" multiple="0" minver="1">4-byte float hint expressing the nominal sensor scale and whether it is inverted. For sensors (accelerometer) where one of several nominal sensitivities can be stuffed. This value is optionally used by the device to distinguish stuffed sensitivities without having to interpret a calibration element.</element>
			<element name="AnalogSensorChannel" level="2" id="0x4D50" type="master" mandatory="0" multiple="1" minver="1">Class B (2 byte + 2 length) Master element for one sensor channel.</element>
				<element name="AnalogSensorChannelEntryID" level="3" id="0x4D51" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte Entry ID for this channel.</element>
				<element name="AnalogSensorChannelADCChannel" level="3" id="0x4D52" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte ADC channel number corresponding to this sensor channel.</element>
				<element name="AnalogSensorChannelAxisName" level="3" id="0x4D53" type="string" mandatory="0" multiple="0" minver="1">16-byte Axis name associated with this sensor channel.</element>
				<element name="AnalogSensorChannelCalIDRef" level="3" id="0x4D54" type="uinteger" mandatory="0" multiple="0" minver="1">1-byte Reference to a SensorSubChannel-level CalID. This will store actual sensor calibration modifying the basic scale/offset parameters.</element>
				<element name="AnalogSensorBWLowerCutoff" level="3" id="0x4D55" type="uinteger" mandatory="0" multiple="0" minver="1">4-byte Lower cutoff frequency in Hz.</element>
				<element name="AnalogSensorBWUpperCutoff" level="3" id="0x4D56" type="uinteger" mandatory="0" multiple="0" minver="1">4-byte Upper cutoff frequency in Hz.</element>

		<!-- Codes for specific digital sensors and storage devices. We can't make this all-singing-all-dancing generic, but can at least tell the FW if specific sensors at known e.g. bus locations are stuffed or not. -->
		<!-- Media elements (SD, eventually wireless/etc.?) -->
		<element name="DigitalStorageSD" level="1" id="0x4D80" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of a uSD card on the SPI bus.</element>

		<!-- Digital inertial sensors (accelerometer, gyro, IMU, etc.) -->
		<element name="DigitalSensorADXL362" level="1" id="0x4D90" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of an ADXL362 accelerometer on the SPI bus.</element>
		<element name="DigitalSensorADXL345" level="1" id="0x4D91" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of an ADXL345 accelerometer on the SPI bus.</element>
		<element name="DigitalSensorADXL375" level="1" id="0x4D92" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of an ADXL375 accelerometer on the SPI bus.</element>
		<element name="DigitalSensorBNO055" level="1" id="0x4D93" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of a BNO055 IMU on the I2C0 bus.</element>

		<!-- Digital pressure/other sensors -->
		<element name="DigitalSensorMPL3115A2" level="1" id="0x4DA0" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of an MPL3115A2 P/T sensor on the I2C0 bus.</element>
		<element name="DigitalSensorMS8607" level="1" id="0x4DA1" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of an MS8607 P/T/H sensor on the I2C1 bus.</element>

		<!-- Timing/Sync inputs -->
		<element name="DigitalSensorIR" level="1" id="0x4DB0" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of a digital IR sensor.</element>

		<!-- GPS/Sync inputs -->
		<element name="DigitalSensorGPS_UART" level="1" id="0x4DC0" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of a GPS with full data (location) broken out on UART.</element>

		<!-- Misc. -->

		<element name="DigitalSensorBHI160" level="1" id="0x4D94" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of a BNO055 IMU on the I2C0 bus.</element>
		<element name="DigitalSensorReset" level="1" id="0x4DD0" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of a hardware pushbutton reset controller.</element>
		<element name="DigitalPowerMAX77801" level="1" id="0x4DD1" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of a MAX77801 power management IC on the I2C1 bus.</element>
		<element name="DigitalLedThree" level="1" id="0x4DD2" type="master" mandatory="0" multiple="0" minver="1">Indicates that the membrane has a 3rd LED driven by the MCU.</element>
		<element name="DigitalSensorSI1133" level="1" id="0x4DD3" type="master" mandatory="0" multiple="0" minver="1">Indicates the presence of a SI1133 light sensor on the I2C1 bus.</element>

</table>
